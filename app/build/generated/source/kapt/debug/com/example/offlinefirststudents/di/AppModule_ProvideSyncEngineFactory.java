// Generated by Dagger (https://dagger.dev).
package com.example.offlinefirststudents.di;

import com.example.offlinefirststudents.data.local.AppDatabase;
import com.example.offlinefirststudents.data.remote.MockRemoteApi;
import com.example.offlinefirststudents.sync.SyncEngine;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation"
})
public final class AppModule_ProvideSyncEngineFactory implements Factory<SyncEngine> {
  private final Provider<AppDatabase> dbProvider;

  private final Provider<MockRemoteApi> remoteProvider;

  public AppModule_ProvideSyncEngineFactory(Provider<AppDatabase> dbProvider,
      Provider<MockRemoteApi> remoteProvider) {
    this.dbProvider = dbProvider;
    this.remoteProvider = remoteProvider;
  }

  @Override
  public SyncEngine get() {
    return provideSyncEngine(dbProvider.get(), remoteProvider.get());
  }

  public static AppModule_ProvideSyncEngineFactory create(Provider<AppDatabase> dbProvider,
      Provider<MockRemoteApi> remoteProvider) {
    return new AppModule_ProvideSyncEngineFactory(dbProvider, remoteProvider);
  }

  public static SyncEngine provideSyncEngine(AppDatabase db, MockRemoteApi remote) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideSyncEngine(db, remote));
  }
}
